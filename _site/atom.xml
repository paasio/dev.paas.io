<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>PaaS.io Developer Portal</title>
 <link href="http://dev.paas.io/atom.xml" rel="self"/>
 <link href="http://dev.paas.io"/>
 <link rel="license" type="/application/rdf+xml" href="http://creativecommons.org/licenses/by-nc-sa/3.0/rdf" />
 <updated>2012-02-13T15:01:28-08:00</updated>
 <id>http://dev.paas.io</id>
 <author>
     <name>PaaS.io, Inc.</name>
     <email>help@paas.io</email>
 </author>

 
 <entry>
   <title>Useful Commands</title>
   <link href="http://dev.paas.io//troubleshooting/useful-commands"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2012-02-13T00:00:00-08:00</updated>
   <id>http://dev.paas.io//troubleshooting/useful-commands</id>
   <content type="html">&lt;p&gt;When trying to troubleshoot an application issue, there are a number of
useful commands you can use to get insight into the problem.&lt;/p&gt;

&lt;p&gt;Almost all of these are using the &lt;code&gt;paasio&lt;/code&gt; command line tool. To install
and configure the command line tool, do the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; gem install paasio
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; paasio login
&lt;span class=&quot;go&quot;&gt;Attempting login to [https://api.paas.io]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Email: person@example.com&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Password: ************&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Successfully logged into [https://api.paas.io]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;Application Health&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; paasio apps

&lt;span class=&quot;go&quot;&gt;+-----------------+----+---------+----------------------------------------+-------------+&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;| Application     | #  | Health  | URLS                                   | Services    |&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+-----------------+----+---------+----------------------------------------+-------------+&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;| my-rails31-app  | 1  | 0%      | my-rails31-app.paas.io                 |             |&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;+-----------------+----+---------+----------------------------------------+-------------+&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;From here we can see the application is configured for 1 instance,
however its health (number of running instances to number of configured
instances) is 0%.&lt;/p&gt;

&lt;p&gt;We can use some of the other commands to look into why the instances
failed to start.&lt;/p&gt;

&lt;h2&gt;Application Logs&lt;/h2&gt;

&lt;p&gt;The best way to navigate the log files for an application is through the
&lt;code&gt;paasio files&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;To browse the base directory do the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; paasio files my-rails31-app
&lt;span class=&quot;go&quot;&gt;app/                                         -&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;logs/                                        -&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;All application will have an &lt;code&gt;app&lt;/code&gt; and a &lt;code&gt;logs&lt;/code&gt; directory.  The &lt;code&gt;app&lt;/code&gt;
directory can be used to browse the application code that is being
loaded, while the &lt;code&gt;logs&lt;/code&gt; directory contains various log files from
different peices.&lt;/p&gt;

&lt;p&gt;Specify the path on the end of the &lt;code&gt;paasio files&lt;/code&gt; command to dig deeper.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; paasio files my-rails31-app logs
&lt;span class=&quot;go&quot;&gt;staging.log                               832B&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;migrations.log                            3.7K&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;stderr.log                               17.2K&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;stdout.log                               21.5K&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Here we can see that we have 4 logs available.&lt;/p&gt;

&lt;p&gt;To view an individual log file, simply add it on to the command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; paasio files my-rails31-app logs/staging.log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This will output the entire contents of the file.&lt;/p&gt;

&lt;p&gt;Some of the common log files include:&lt;/p&gt;

&lt;table class=&quot;table&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;staging.log&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;This is the output of the staging phase which is run
  when an application is deployed and packaged (the `Staging
Application` line in the deploy output). Issues with installing
dependencies will be captured in this log file.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;migrations.log&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;On startup, Rails applications will run any pending
  migrations and capture the output to this file. If the application
failed to start up due to a database configuration issue, it will be
shown here. Double check the correct database adapter is installed and
you have attached the database to the application.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;stderr.log&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Anything written to `STDERR` within the application will
  be stored here.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;stdout.log&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;Anything written to `STDOUT` within the application will
  be stored here. If your application is behaving incorrectly, you might
try and instrument some logging and watch the output in this file.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</content>
 </entry>
 
 <entry>
   <title>Ruby - Sinatra</title>
   <link href="http://dev.paas.io//tutorials/ruby-sinatra"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2012-02-13T00:00:00-08:00</updated>
   <id>http://dev.paas.io//tutorials/ruby-sinatra</id>
   <content type="html">&lt;p&gt;In this tutorial, we will cover how to deploy a basic Hello World
Sinatra application to PaaS.io.&lt;/p&gt;

&lt;p&gt;Please note that this tutorial has a few distinct differences from the
Rack tutorial. A Sinatra application doesn't need a &lt;code&gt;config.ru&lt;/code&gt; file and
instead runs the main Sinatra application file directly.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic Ruby knowledge, including Bundler&lt;/li&gt;
&lt;li&gt;Ruby already installed&lt;/li&gt;
&lt;li&gt;Basic knowledge of Git, or Mercurial if you wish to use Mercurial&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Create Your Application&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; mkdir myapp
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myapp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h4&gt;Gemfile&lt;/h4&gt;

&lt;p&gt;In your Gemfile, add the following entries:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rubygems&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;thin&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;After creating the Gemfile, be sure to run &lt;code&gt;bundle install&lt;/code&gt; to install
the gems and to generate the &lt;code&gt;Gemfile.lock&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;It is necessary to specify &lt;code&gt;thin&lt;/code&gt; in the Gemfile or else the application
will be started using WebBrick instead.&lt;/p&gt;

&lt;h4&gt;Main Application&lt;/h4&gt;

&lt;p&gt;Create a file called &lt;code&gt;hello.rb&lt;/code&gt; containing the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rubygems&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello from PaaS.io&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The Sinatra framework will directly run the first file it sees
contianing the line &lt;code&gt;require 'sinatra'&lt;/code&gt;.  Because of this, you can't
have Bundler take care of the requiring.  If you want to use Bundler to
require all the files, then the Rack framework is recommended instead,
and it will load the application directly using the &lt;code&gt;config.ru&lt;/code&gt; rackup
file.&lt;/p&gt;

&lt;h2&gt;Adding to Source Control&lt;/h2&gt;

&lt;p&gt;If using Git, you can now create a repository:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git init
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git add .
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Initial Commit&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;Deploying Your Application&lt;/h2&gt;

&lt;p&gt;If you don't have it already, would recommend installing the PaaS.io
command line tool:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; gem install paasio
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; paasio login
&lt;span class=&quot;go&quot;&gt;Attempting login to [https://api.paas.io]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Email: person@example.com&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Password: ************&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Successfully logged into [https://api.paas.io]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;To create your application, use &lt;code&gt;paasio create&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; paasio create my-sinatra-app
&lt;span class=&quot;go&quot;&gt;Using application name &amp;quot;my-sinatra-app&amp;quot;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Application Deployed URL [my-sinatra-app.paas.io]:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Detected a Sinatra Application, is this correct? [Yn]:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Memory Reservation (256M, 512M, 1G, 2G) [256M]:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Creating Application: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Git remote paasio added&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Since it saw we were using a Git
repository, it automatically added a &lt;code&gt;paasio&lt;/code&gt; remote to our repository:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git remote show paasio
&lt;span class=&quot;go&quot;&gt;* remote paasio&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Fetch URL: deploy@paas.io:my-sinatra-app.git&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Push  URL: deploy@paas.io:my-sinatra-app.git&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  HEAD branch: (unknown)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The HEAD branch portion says &quot;(unknown)&quot; because we haven't yet pushed
anything to it.&lt;/p&gt;

&lt;p&gt;Now we're ready to deploy it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git push -u paasio master
&lt;span class=&quot;go&quot;&gt;Counting objects: 63, done.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Delta compression using up to 8 threads.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Compressing objects: 100% (48/48), done.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Writing objects: 100% (63/63), 25.21 KiB, done.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Total 63 (delta 2), reused 0 (delta 0)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Checking out code: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Uploading Application:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:   Checking for available resources: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:   Packing application: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:   Uploading (4K): Push Status: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Staging Application &amp;#39;my-sinatra-app&amp;#39;: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Starting Application &amp;#39;my-sinatra-app&amp;#39;: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;To deploy@paas.io:my-sinatra-app.git&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; * [new branch]      master -&amp;gt; master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Branch master set up to track remote branch master from paasio.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Your application is now live! When deploying, it may sit at the &quot;Staging
Application&quot; stage for a little while at first.  It is working on
installing all of the necessary gems. On future deploys, it will be much
quicker since it will cache compiled gems for future use.&lt;/p&gt;

&lt;p&gt;We specify the &lt;code&gt;-u&lt;/code&gt; parameter in the push command because this sets up
tracking in Git. With that, when you run &lt;code&gt;git status&lt;/code&gt;, it will show you
how many commits haven't been pushed to PaaS.io yet.&lt;/p&gt;

&lt;h4&gt;Verifying it is live&lt;/h4&gt;

&lt;p&gt;We can test it out with a simple &lt;code&gt;curl&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl http://my-sinatra-app.paas.io
&lt;span class=&quot;go&quot;&gt;Hello from PaaS.io&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



</content>
 </entry>
 
 <entry>
   <title>Ruby - Rails 3.1</title>
   <link href="http://dev.paas.io//tutorials/ruby-rails-31"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2012-02-13T00:00:00-08:00</updated>
   <id>http://dev.paas.io//tutorials/ruby-rails-31</id>
   <content type="html">&lt;p&gt;In this tutorial, we will cover how to deploy a brand new Rails 3.1
application to PaaS.io, focusing primarily on the configuration changes
that are necessary.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic Rails knowledge, including Bundler&lt;/li&gt;
&lt;li&gt;Ruby already installed&lt;/li&gt;
&lt;li&gt;Basic knowledge of Git, or Mercurial if you wish to use Mercurial&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Create Your Application&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; rails new myapp
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myapp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h4&gt;Gemfile updates&lt;/h4&gt;

&lt;p&gt;In your Gemfile, add the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:production&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;thin&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;If you are also using a MySQL database, PaaS.io will automatically
generate the &lt;code&gt;database.yml&lt;/code&gt; on deploy with the proper credentials,
however you'll need to be sure to include the &lt;code&gt;mysql2&lt;/code&gt; gem in the
production group:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mysql2&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Now need to run bundler to make sure it regenerates the &lt;code&gt;Gemfile.lock&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h4&gt;Assets&lt;/h4&gt;

&lt;p&gt;By default, PaaS.io will automatically enable the serving of static
assets. Application instances are not directly behind a web server like
nginx, so serving of static assets must be enabled. It is automatically
enabled at deploy time.&lt;/p&gt;

&lt;h6&gt;Precompiled Assets&lt;/h6&gt;

&lt;p&gt;The simplest option for assets is to have them precompiled and checked
into your repository. You can run the following to compile your assets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;RAILS_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;rake assets:clean assets:precompile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;You will need to do this anytime you make a change to any of the
javascript, CSS, or image assets in your project.&lt;/p&gt;

&lt;h6&gt;Deploy Time Compilation&lt;/h6&gt;

&lt;p&gt;Currently, deploy time compilation is not supported, however it will be
soon. On deploy, the assets will be precompiled if they are found to not
be precompiled.&lt;/p&gt;

&lt;h6&gt;Runtime Compilation&lt;/h6&gt;

&lt;p&gt;If your assets aren't precompiled, they can be compiled at runtime.
PaaS.io will inject a plugin to enable Rails runtime compilation.&lt;/p&gt;

&lt;h2&gt;Adding to Source Control&lt;/h2&gt;

&lt;p&gt;If using Git, you can now create a repository:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git init
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git add .
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Initial Commit&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;Deploying Your Application&lt;/h2&gt;

&lt;p&gt;If you don't have it already, would recommend installing the PaaS.io
command line tool:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; gem install paasio
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; paasio login
&lt;span class=&quot;go&quot;&gt;Attempting login to [https://api.paas.io]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Email: person@example.com&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Password: ************&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Successfully logged into [https://api.paas.io]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;To create your application, use &lt;code&gt;paasio create&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; paasio create my-rails31-app
&lt;span class=&quot;go&quot;&gt;Using application name &amp;quot;my-rails31-app&amp;quot;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Application Deployed URL [my-rails31-app.paas.io]:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Detected a Rails Application, is this correct? [Yn]:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Memory Reservation (256M, 512M, 1G, 2G) [256M]:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Creating Application: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Git remote paasio added&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Since it saw we were using a Git
repository, it automatically added a &lt;code&gt;paasio&lt;/code&gt; remote to our repository:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git remote show paasio
&lt;span class=&quot;go&quot;&gt;* remote paasio&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Fetch URL: deploy@paas.io:my-rails31-app.git&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Push  URL: deploy@paas.io:my-rails31-app.git&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  HEAD branch: (unknown)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The HEAD branch portion says &quot;(unknown)&quot; because we haven't yet pushed
anything to it.&lt;/p&gt;

&lt;p&gt;Now we're ready to deploy it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git push -u paasio master
&lt;span class=&quot;go&quot;&gt;Counting objects: 63, done.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Delta compression using up to 8 threads.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Compressing objects: 100% (48/48), done.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Writing objects: 100% (63/63), 25.21 KiB, done.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Total 63 (delta 2), reused 0 (delta 0)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Checking out code: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Uploading Application:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:   Checking for available resources: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:   Packing application: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:   Uploading (36K): Push Status: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Staging Application &amp;#39;my-rails31-app&amp;#39;: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Starting Application &amp;#39;my-rails31-app&amp;#39;: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;To deploy@paas.io:my-rails31-app.git&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; * [new branch]      master -&amp;gt; master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Branch master set up to track remote branch master from paasio.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Your application is now live! When deploying, it may sit at the &quot;Staging
Application&quot; stage for a little while at first.  It is working on
installing all of the necessary gems. On future deploys, it will be much
quicker since it will cache compiled gems for future use.&lt;/p&gt;

&lt;p&gt;We specify the &lt;code&gt;-u&lt;/code&gt; parameter in the push command because this sets up
tracking in Git. With that, when you run &lt;code&gt;git status&lt;/code&gt;, it will show you
how many commits haven't been pushed to PaaS.io yet.&lt;/p&gt;

&lt;h2&gt;Common Questions&lt;/h2&gt;

&lt;h4&gt;Migrations&lt;/h4&gt;

&lt;p&gt;Migrations are automatically checked and ran when an application is
starting up.&lt;/p&gt;

&lt;h4&gt;Rails Console&lt;/h4&gt;

&lt;p&gt;Currently we do not have support for loading the Rails console.
Support for this will be coming soon.&lt;/p&gt;

&lt;h4&gt;Rake Tasks&lt;/h4&gt;

&lt;p&gt;Currently we do not support running one-off rake tasks. Supporting them
is on our roadmap though.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Ruby - Rack</title>
   <link href="http://dev.paas.io//tutorials/ruby-rack"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2012-02-13T00:00:00-08:00</updated>
   <id>http://dev.paas.io//tutorials/ruby-rack</id>
   <content type="html">&lt;p&gt;In this tutorial, we will cover how to deploy a basic Hello World
Rack application using Sinatra to PaaS.io.&lt;/p&gt;

&lt;p&gt;Please note that this tutorial has a lot in common with the Sinatra
tutorial, however by a Rack application loads based on the &lt;code&gt;config.ru&lt;/code&gt;
file while the Sinatra application type targets the file which contains
the line &lt;code&gt;require 'sinatra'&lt;/code&gt;.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic Ruby knowledge, including Bundler&lt;/li&gt;
&lt;li&gt;Ruby already installed&lt;/li&gt;
&lt;li&gt;Basic knowledge of Git, or Mercurial if you wish to use Mercurial&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Create Your Application&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; mkdir myapp
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myapp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h4&gt;Gemfile&lt;/h4&gt;

&lt;p&gt;In your Gemfile, add the following entries:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rubygems&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sinatra&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;thin&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;After creating the Gemfile, be sure to run &lt;code&gt;bundle install&lt;/code&gt; to install
the gems and to generate the &lt;code&gt;Gemfile.lock&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;It is necessary to specify &lt;code&gt;thin&lt;/code&gt; in the Gemfile or else the application
will be started using WebBrick instead.&lt;/p&gt;

&lt;h4&gt;Main Application&lt;/h4&gt;

&lt;p&gt;Create a file called &lt;code&gt;hello.rb&lt;/code&gt; containing the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bundler&amp;#39;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Bundler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;require&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
   &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello from PaaS.io&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;In comparison to the Sinatra tutorial, now we're simply using
&lt;code&gt;Bundler.require&lt;/code&gt; to load all the necessary gems.&lt;/p&gt;

&lt;h4&gt;The Rackup File (config.ru)&lt;/h4&gt;

&lt;p&gt;And finally, we create the rackup file (&lt;code&gt;config.ru&lt;/code&gt;) which specifies how
to start up the application.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;./hello&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sinatra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;In this case, it simply loads the &lt;code&gt;hello.rb&lt;/code&gt; file and then calls to
&lt;code&gt;Sinatra::Application&lt;/code&gt; as the main rack application to run.&lt;/p&gt;

&lt;h2&gt;Adding to Source Control&lt;/h2&gt;

&lt;p&gt;If using Git, you can now create a repository:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git init
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git add .
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Initial Commit&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;Deploying Your Application&lt;/h2&gt;

&lt;p&gt;If you don't have it already, would recommend installing the PaaS.io
command line tool:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; gem install paasio
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; paasio login
&lt;span class=&quot;go&quot;&gt;Attempting login to [https://api.paas.io]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Email: person@example.com&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Password: ************&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Successfully logged into [https://api.paas.io]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;To create your application, use &lt;code&gt;paasio create&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; paasio create my-rack-app
&lt;span class=&quot;go&quot;&gt;Using application name &amp;quot;my-rack-app&amp;quot;...&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Application Deployed URL [my-rack-app.paas.io]:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Detected a Rack Application, is this correct? [Yn]:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Memory Reservation (256M, 512M, 1G, 2G) [256M]:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Creating Application: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Git remote paasio added&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Since it saw we were using a Git
repository, it automatically added a &lt;code&gt;paasio&lt;/code&gt; remote to our repository:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git remote show paasio
&lt;span class=&quot;go&quot;&gt;* remote paasio&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Fetch URL: deploy@paas.io:my-rack-app.git&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Push  URL: deploy@paas.io:my-rack-app.git&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  HEAD branch: (unknown)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The HEAD branch portion says &quot;(unknown)&quot; because we haven't yet pushed
anything to it.&lt;/p&gt;

&lt;p&gt;Now we're ready to deploy it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git push -u paasio master
&lt;span class=&quot;go&quot;&gt;Counting objects: 63, done.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Delta compression using up to 8 threads.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Compressing objects: 100% (48/48), done.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Writing objects: 100% (63/63), 25.21 KiB, done.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Total 63 (delta 2), reused 0 (delta 0)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Checking out code: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Uploading Application:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:   Checking for available resources: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:   Packing application: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:   Uploading (4K): Push Status: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Staging Application &amp;#39;my-rack-app&amp;#39;: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Starting Application &amp;#39;my-rack-app&amp;#39;: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;To deploy@paas.io:my-rack-app.git&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; * [new branch]      master -&amp;gt; master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Branch master set up to track remote branch master from paasio.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Your application is now live! When deploying, it may sit at the &quot;Staging
Application&quot; stage for a little while at first.  It is working on
installing all of the necessary gems. On future deploys, it will be much
quicker since it will cache compiled gems for future use.&lt;/p&gt;

&lt;p&gt;We specify the &lt;code&gt;-u&lt;/code&gt; parameter in the push command because this sets up
tracking in Git. With that, when you run &lt;code&gt;git status&lt;/code&gt;, it will show you
how many commits haven't been pushed to PaaS.io yet.&lt;/p&gt;

&lt;h4&gt;Verifying it is live&lt;/h4&gt;

&lt;p&gt;We can test it out with a simple &lt;code&gt;curl&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl http://my-rack-app.paas.io
&lt;span class=&quot;go&quot;&gt;Hello from PaaS.io&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



</content>
 </entry>
 
 <entry>
   <title>Node.js</title>
   <link href="http://dev.paas.io//tutorials/nodejs"/>
   <link rel="license" type="text/html" href="http://creativecommons.org/licenses/by-nc-sa/3.0/" />
   <updated>2012-02-13T00:00:00-08:00</updated>
   <id>http://dev.paas.io//tutorials/nodejs</id>
   <content type="html">&lt;p&gt;In this tutorial, we will cover how to deploy a simple &quot;Hello World&quot;
Node.js application.&lt;/p&gt;

&lt;h2&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Basic Node.js knowledge&lt;/li&gt;
&lt;li&gt;Node.js 0.6 already installed&lt;/li&gt;
&lt;li&gt;Basic knowledge of Git, or Mercurial if you wish to use Mercurial&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Create Your Application&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; mkdir node-hello
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;node-hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Create an &lt;code&gt;app.js&lt;/code&gt; file which will be your main entry point. By default,
PaaS.io will look for a file in the following order:
&lt;code&gt;server.js&lt;/code&gt;, &lt;code&gt;app.js&lt;/code&gt;, &lt;code&gt;index.js&lt;/code&gt;, &lt;code&gt;main.js&lt;/code&gt;, or &lt;code&gt;application.js&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, World&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;VCAP_APP_PORT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The port which the application is supposed to be listening on is passed
using the &lt;code&gt;VCAP_APP_PORT&lt;/code&gt; environment variable. If this port isn't bound
to on startup, it will assume the application failed to start and
terminate it.&lt;/p&gt;

&lt;p&gt;This app makes use of the &lt;code&gt;express&lt;/code&gt; module, so we need to install that
locally with &lt;code&gt;npm&lt;/code&gt; to test it out.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; npm install express
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This will create the &lt;code&gt;node_modules&lt;/code&gt; directory. Currently, we don't
install modules that are specified in a &lt;code&gt;packages.json&lt;/code&gt; file, so the
modules directory must be commited to source control and deployed.&lt;/p&gt;

&lt;p&gt;If we want to run our application locally, can just call &lt;code&gt;node app.js&lt;/code&gt;
and it will start up and be listening on port 3000.&lt;/p&gt;

&lt;h2&gt;Adding to Source Control&lt;/h2&gt;

&lt;p&gt;If using Git, you can now create a repository:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git init
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git add .
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Initial Commit&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;Deploying Your Application&lt;/h2&gt;

&lt;p&gt;If you don't have it already, would recommend installing the PaaS.io
command line tool:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; gem install paasio
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; paasio login
&lt;span class=&quot;go&quot;&gt;Attempting login to [https://api.paas.io]&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Email: person@example.com&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Password: ************&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Successfully logged into [https://api.paas.io]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;To create your application, use &lt;code&gt;paasio create&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; paasio create node-hello
&lt;span class=&quot;go&quot;&gt;Application Deployed URL [node-hello.paas.io]:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Detected a Node.js Application, is this correct? [Yn]:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Memory Reservation (256M, 512M, 1G, 2G) [256M]:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Creating Application: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Git remote paasio added&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Since it saw we were using a Git
repository, it automatically added a &lt;code&gt;paasio&lt;/code&gt; remote to our repository:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git remote show paasio
&lt;span class=&quot;go&quot;&gt;* remote paasio&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Fetch URL: deploy@paas.io:node-hello.git&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  Push  URL: deploy@paas.io:node-hello.git&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;  HEAD branch: (unknown)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The HEAD branch portion says &quot;(unknown)&quot; because we haven't yet pushed
anything to it.&lt;/p&gt;

&lt;p&gt;Now we're ready to deploy it.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; git push -u paasio master
&lt;span class=&quot;go&quot;&gt;Counting objects: 63, done.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Delta compression using up to 8 threads.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Compressing objects: 100% (48/48), done.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Writing objects: 100% (63/63), 25.21 KiB, done.&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Total 63 (delta 2), reused 0 (delta 0)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Checking out code: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Uploading Application:&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:   Checking for available resources: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:   Packing application: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote:   Uploading (12K): Push Status: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Staging Application &amp;#39;node-hello&amp;#39;: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;remote: Starting Application &amp;#39;node-hello&amp;#39;: OK&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;To deploy@paas.io:node-hello.git&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt; * [new branch]      master -&amp;gt; master&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;Branch master set up to track remote branch master from paasio.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We specify the &lt;code&gt;-u&lt;/code&gt; parameter in the push command because this sets up
tracking in Git. With that, when you run &lt;code&gt;git status&lt;/code&gt;, it will show you
how many commits haven't been pushed to PaaS.io yet.&lt;/p&gt;

&lt;p&gt;Your application is now live! We can test it out with a simple &lt;code&gt;curl&lt;/code&gt;
command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; curl http://node-hello.paas.io
&lt;span class=&quot;go&quot;&gt;Hello, World&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



</content>
 </entry>
 
 
</feed>